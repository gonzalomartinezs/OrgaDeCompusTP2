 Ir  I1mr ILmr Dr  D1mr DLmr Dw D1mw DLmw 
  .    .    .   .    .    .  .    .    .  	.text
  .    .    .   .    .    .  .    .    .  	.align	2
  .    .    .   .    .    .  .    .    .  	.globl	main
  .    .    .   .    .    .  .    .    .  	.ent	main
  .    .    .   .    .    .  .    .    .  main:
  .    .    .   .    .    .  .    .    .  	.set	noreorder
  3    1    1   0    0    0  0    0    0  	.cpload	t9		-> .cpload se expande en 3 instrucciones. Cuando se busca la primera instruccion(no se encuentra en la cache) y se produce un MISS.Entonces se guarda en la cache de instrucciones el bolque de 16 bytes(4 instr.) que la contiene. Como las instrucciones se guardan consecutivas en memoria, las 2 instrucciones siguientes de .cpload se encuentran en el mismo bloque que la primera instruccion guardada(ya que cada bloque tiene 16 bytes).Por ende cuando se buscan en cache ambas resultan en HIT.->se guardan en el indice n%4.
  .    .    .   .    .    .  .    .    .  	.set	nomacro
  1    0    0   0    0    0  0    0    0  	addiu	sp, sp, -24	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT.
  1    1    1   0    0    0  1    1    1  	sw	fp, 20(sp)	-> Se busca esta instrucción en su respectiva caché, lo cual resulta en MISS. Por lo cual, se carga en la caché de instrucciones ésta y las siguientes 3 instrucciones. (el index es (n+1)%4). Por otro lado, en la caché de datos no se encuentra la dirección correspondiente a 20(sp), produciéndose un MISS. De esta manera, se carga en la caché el bloque de 16 bytes que contiene dicha dirección (el index es n%4)
  1    0    0   0    0    0  0    0    0  	move	fp, sp		-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT.
  1    0    0   0    0    0  1    1    1  	.cprestore	0	-> Esta directiva se interpreta como la siguiente instrucción 'sw     gp,0(sp)', la cual también se encuentra en el segundo bloque cargado en caché. Es un HIT. Por otra parte, la dirección correspondiente a 0(sp) no se encuentra en la caché de datos, resultando en un MISS. Así, se carga en la caché el bloque de 16 bytes que contiene dicha dirección (el index es (n+1)%4).
  .    .    .   .    .    .  .    .    .  
  1    0    0   1    1    1  0    0    0  	la	t0, aligned	-> Esta instruccion deberia expandirse en dos instrucciones. Como la primera instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT. Se busca la segunda instrucción en su respectiva caché, lo cual resulta en MISS. Por lo cual, se carga en la caché de instrucciones ésta al igual que sus siguientes 3 instrucciones.->se guardan en el indice (n+1)%4. Sin embargo, se produce un MISS de lectura en la caché de datos, pues no se encuentra el dato asociado a la dirección de 'aligned'.  De esta manera, se carga en la caché el bloque de 16 bytes que contiene dicha dirección. -> se guarda en el indice (n+2)%4.
  .    .    .   .    .    .  .    .    .  	.align	20
  1    1    1   0    0    0  0    0    0  	li	t1, 100		-> Se busca esta instrucción en su respectiva caché, lo cual resulta en MISS. Por lo cual, se carga en la caché de instrucciones ésta al igual que sus siguientes 3 instrucciones.->se guardan en el indice 0(via 0).
100    0    0 100    1    1  0    0    0  loop:	lw	t2, 1024(t0)	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT. Por otra parte, la dirección correspondiente a 1024(t0) no se encuentra en la caché de datos, resultando en un MISS. Así, se carga en la caché el bloque de 16 bytes que contiene dicha dirección (el index es (n+1)%4).
100    0    0   0    0    0  0    0    0  	subu	t1, t1, 1	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT.
100    0    0   0    0    0  0    0    0  	bnez	t1, loop	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT.
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	# Destruimos el stack frame antes de retornar de main().
  .    .    .   .    .    .  .    .    .  	#
100    1    1   0    0    0  0    0    0  	move	sp, fp		-> Se busca esta instrucción en su respectiva caché, lo cual resulta en MISS. Por lo cual, se carga en la caché de instrucciones ésta y las siguientes 3 instrucciones. (el index es (n+1)%4).
  1    0    0   1    0    0  0    0    0  	lw	fp, 20(sp)	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT. Al igual que la direccion correspondiente a 0(sp), que ya se encuentra guardada en la caché de datos.
  1    0    0   0    0    0  0    0    0  	addiu	sp, sp, 24	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT.
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	# Para volver al sistema operativo cargamos un codigo de retorno nulo.
  .    .    .   .    .    .  .    .    .  	#
  1    0    0   0    0    0  0    0    0  	move	v0, zero	-> Como esta instruccion fue guardada en el bloque cargado previamente en la cache, resulta en un HIT.
  1    1    1   0    0    0  0    0    0  	jr	ra		-> Se busca esta instrucción en su respectiva caché, lo cual resulta en MISS. Por lo cual, se carga en la caché de instrucciones ésta y las siguientes 3 instrucciones. (el index es (n+1)%4).
  .    .    .   .    .    .  .    .    .  	.end	main
  .    .    .   .    .    .  .    .    .  
  .    .    .   .    .    .  .    .    .  	.rdata
  .    .    .   .    .    .  .    .    .  	.align	20
  .    .    .   .    .    .  .    .    .  aligned:
  .    .    .   .    .    .  .    .    .  	.skip	8192